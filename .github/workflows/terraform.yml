name: Terraform Multi-Cloud CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'azure/**'
      - 'aws/**'
      - 'gcp/**'
      - 'tests/**'
      - '.github/workflows/**'
      - 'Makefile'
      - 'providers.tf'
      - 'variables.tf'
      - 'scripts/**'
      - '*.md'
  pull_request:
    branches: [ main ]
    paths:
      - 'azure/**'
      - 'aws/**'
      - 'gcp/**'
      - 'tests/**'
      - 'Makefile'
      - 'providers.tf'
      - 'variables.tf'
      - 'scripts/**'

env:
  TERRAFORM_VERSION: 1.6.0
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  validate-environment:
    name: Validate Pipeline Environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Make Scripts Executable
        run: chmod +x scripts/*.sh

      - name: Validate Pipeline Environment
        run: ./scripts/pipeline-env.sh
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

  terraform-format:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

  terraform-validate:
    name: Validate Terraform Modules
    runs-on: ubuntu-latest
    needs: [validate-environment, terraform-format]
    strategy:
      matrix:
        module:
          - azure/resource_group
          - azure/virtual_networks
          - azure/win_compute
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ${{ matrix.module }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ${{ matrix.module }}
        run: terraform validate

      - name: Run Terraform Tests
        working-directory: ${{ matrix.module }}
        run: terraform test
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  security-scan:
    name: Security Scan with Checkov
    runs-on: ubuntu-latest
    needs: validate-environment
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov Scan
        run: |
          checkov -d . --framework terraform --output json --output-file checkov-report.json
          checkov -d . --framework terraform --output sarif --output-file checkov-report.sarif
        continue-on-error: true

      - name: Upload Checkov Results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: |
            checkov-report.json
            checkov-report.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validate, security-scan]
    if: github.event_name == 'pull_request'
    strategy:
      matrix:
        module:
          - azure/resource_group
          - azure/virtual_networks
          - azure/win_compute
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ${{ matrix.module }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ matrix.module }}
        run: terraform plan -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: contains(fromJson('["refs/heads/main", "refs/heads/develop"]'), github.ref)
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Run Integration Tests
        working-directory: tests
        run: |
          terraform init
          terraform test
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

  generate-docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install terraform-docs
        run: |
          curl -sSLo terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Documentation
        run: |
          for module in azure/*/; do
            if [ -d "$module" ]; then
              echo "Generating documentation for $module"
              terraform-docs markdown table --output-file README.md --output-mode inject "$module"
            fi
          done

      - name: Check for Changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit Documentation Changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          git commit -m "docs: Update module documentation [skip ci]"
          git push
