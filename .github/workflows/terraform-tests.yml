name: Terraform Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'azure/**'
      - 'tests/**'
      - '.github/workflows/terraform-tests.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'azure/**'
      - 'tests/**'
      - '.github/workflows/terraform-tests.yml'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  TF_VERSION: "1.6.0"
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module:
          - azure/resource_group
          - azure/virtual_networks
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ${{ matrix.module }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ matrix.module }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ matrix.module }}

    - name: Run Terraform Tests
      run: terraform test
      working-directory: ${{ matrix.module }}

  terraform-security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: terraform-validation
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Run Checkov action
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        quiet: true
        soft_fail: true
        framework: terraform
        output_format: sarif
        output_file_path: reports/results.sarif

    - name: Upload Checkov results to GitHub Advanced Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/results.sarif

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [terraform-validation, terraform-security-scan]
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        module:
          - azure/resource_group
          - azure/virtual_networks
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ matrix.module }}

    - name: Terraform Plan
      run: terraform plan -no-color
      working-directory: ${{ matrix.module }}
      continue-on-error: true
      id: plan

    - name: Comment PR with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Init ðŸ–Œ\`${{ steps.init.outcome }}\`
          #### Terraform Validation ðŸ¤–\`${{ steps.validate.outcome }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan for ${{ matrix.module }}</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: terraform-validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Run Integration Tests
      run: |
        terraform init
        terraform test
      working-directory: tests

    - name: Cleanup Test Resources
      if: always()
      run: |
        # Clean up any test resources that might have been created
        echo "Cleaning up test resources..."
        # Add cleanup commands here if needed

  # TODO: Configure Home Assistant webhook for notifications
  # notify-homeassistant:
  #   name: Notify Home Assistant
  #   runs-on: ubuntu-latest
  #   needs: [terraform-validation, terraform-security-scan, terraform-plan, integration-tests]
  #   if: always() && (github.event_name == 'push' && github.ref == 'refs/heads/main')
  #   
  #   steps:
  #   - name: Send Home Assistant Notification
  #     run: |
  #       curl -X POST "${{ secrets.HOMEASSISTANT_WEBHOOK_URL }}" \
  #         -H "Content-Type: application/json" \
  #         -d '{
  #           "repository": "${{ github.repository }}",
  #           "branch": "${{ github.ref_name }}",
  #           "commit": "${{ github.sha }}",
  #           "status": "${{ job.status }}",
  #           "actor": "${{ github.actor }}",
  #           "title": "Terraform Tests Completed"
  #         }'
